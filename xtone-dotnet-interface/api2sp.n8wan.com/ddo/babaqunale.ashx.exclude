<%@ WebHandler Language="C#" Class="babaqunale" %>

using System;
using System.Web;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Text;
using System.Linq;

public class babaqunale : Shotgun.PagePlus.SimpleHttpHandlerMsSQL, Shotgun.Model.Logical.ILogical
{
    System.Text.StringBuilder sb;
    const string appKey = "ebba0be866d9";

    public override void BeginProcess()
    {
        if (string.IsNullOrEmpty(Request["mobile"]))
        {
            Response.Write("0,mobile miss");
            return;
        }
        switch (Request["step"])
        {
            case "1":
                step1(); break;
            case "2":

            case "3":
        }



    }

    void step2()
    {
        Dictionary<string, string> keyval = new Dictionary<string, string>();

        keyval["v"] = "1.2";
        keyval["appkey"] = appKey;
        keyval["method"] = "billing.order";
        keyval["appId"] = "300000007306";
        keyval["payCode"] = Request["paycode"];
        keyval["cstmOrderNo"] = Request["extdata"];
        keyval["orderId"] = Request["orderId"];

        Console.Write("请输入验证码:");
        keyval["verifyCode"] = Console.ReadLine();

        keyval["sig"] = encoder(keyval);
        var pdata = DictToJson(keyval);
        var html = PostData("http://123.57.154.171/vas/jf/platform/api", pdata);

        if (!html.Contains("\"code\":\"0\""))
        {
            Console.WriteLine("fail");
            Console.ReadLine();
            return;
        }
    }


    void step1()
    {
        Dictionary<string, string> keyval = new Dictionary<string, string>();
        keyval["appkey"] = appKey;
        keyval["method"] = "billing.verifyCode";
        keyval["phoneNo"] = Request["mobile"];// +(DateTime.Now.Millisecond + 1000).ToString();
        keyval["callbackUrl"] = "http://101.200.73.171:9999/interface/sms/vas_gxhl.asp";
        keyval["v"] = "1.2";
        keyval["cstmOrderNo"] = Request["extdata"];
        keyval["sig"] = encoder(keyval);
        string pdata = DictToJson(keyval);

        var html = PostData("http://123.57.154.171/vas/jf/platform/api", pdata);
        if (html == null)
        {
            Response.Write("0,time out");
            return;
        }
        //Result:{"data":{"orderId":"Bcacbb42fd2c9488e8cc30e792603a"},"code":"0","msg":"计费请求成功"}
        var jobj = Newtonsoft.Json.Linq.JObject.Parse(html);
        var node = jobj["orderId"];
        if (node == null)
        {
            Response.Write("1," + node.ToString());
            return;
        }
        Response.Write("1,");

        node = jobj["msg"];
        if (node == null)
            Response.Write(node.ToString());
        else
            Response.Write("unkonw error");
    }


    void WriteLog(string msg)
    {
        if (sb == null)
            sb = new System.Text.StringBuilder();
        sb.AppendFormat("{0:HH:mm:ss} {1}", DateTime.Now, msg);
        sb.AppendLine();

    }

    private string PostData(string url, string pdata)
    {

        Console.ForegroundColor = ConsoleColor.White;
        Console.Write("post:");
        Console.WriteLine(pdata);
        System.Net.HttpWebRequest web = null;
        this.WriteLog(pdata);
        try
        {
            web = (System.Net.HttpWebRequest)System.Net.WebRequest.Create(url);
        }
        catch (Exception ex)
        {
            WriteLog(ex.Message);
            return null;
        }

        System.Net.HttpWebResponse rsp = null;
        web.Timeout = 10 * 1000;
        web.AllowAutoRedirect = false;
        web.AutomaticDecompression = System.Net.DecompressionMethods.GZip;

        web.Method = "POST";

        try
        {
            var bin = System.Text.ASCIIEncoding.UTF8.GetBytes(pdata);
            web.ContentLength = bin.Length;

            using (var stm = web.GetRequestStream())
            {
                stm.Write(bin, 0, bin.Length);
            }

            rsp = (System.Net.HttpWebResponse)web.GetResponse();
        }
        catch (System.Net.WebException ex)
        {
            WriteLog(ex.Message);
            return null;
        }


        var code = rsp.StatusCode;
        try
        {
            using (var stm = rsp.GetResponseStream())
            {
                using (var rd = new System.IO.StreamReader(stm))
                {
                    string html = rd.ReadToEnd();
                    WriteLog(html);
                    return html;
                }
            }
        }
        catch (Exception ex)
        {
            WriteLog(ex.Message);
            return null;
        }
    }

    private static string DictToJson(Dictionary<string, string> keyval)
    {
        StringBuilder sb = new StringBuilder();
        sb.Append("{");
        foreach (var kv in keyval)
        {
            sb.AppendFormat("\"{0}\":\"{1}\",", kv.Key, kv.Value);
        }
        sb.Length--;
        sb.Append("}");



        return sb.ToString();
    }

    private static string encoder(Dictionary<string, string> keyval)
    {
        var data = keyval.OrderBy(e => e.Key);
        StringBuilder sb = new StringBuilder();
        foreach (var k in data)
        {
            switch (k.Key.ToLower())
            {
                case "sig": continue;
            }
            sb.Append(k.Key);
            sb.Append(k.Value);
        }
        sb.Append("8uj6yhrgbrfgbno");
        System.Security.Cryptography.SHA1 sha1 = new System.Security.Cryptography.SHA1CryptoServiceProvider();
        byte[] bytes_sha1_in = UTF8Encoding.Default.GetBytes(sb.ToString());
        byte[] bytes_sha1_out = sha1.ComputeHash(bytes_sha1_in);
        return BitConverter.ToString(bytes_sha1_out).Replace("-", "").ToLower();

    }


}